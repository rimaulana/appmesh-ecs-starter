---
AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  VPC with public and private subnets spreads in 3 different AZs

Parameters:

  ClusterName:
    Type: String
    Description: Give the name of ECS cluster

  VpcCidr:
    Type: String
    Default: 10.123.0.0/16
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: Define primary CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  PublicSubnet01Block:
    Type: String
    Default: 10.123.61.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: Define the first CIDR block for public subnet

  PublicSubnet02Block:
    Type: String
    Default: 10.123.62.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: Define the second CIDR block for public subnet

  PublicSubnet03Block:
    Type: String
    Default: 10.123.63.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: Define the third CIDR block for public subnet

  PrivateSubnet01Block:
    Type: String
    Default: 10.123.64.0/18
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: Define the first CIDR block for private subnet

  PrivateSubnet02Block:
    Type: String
    Default: 10.123.128.0/18
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: Define the second CIDR block for private subnet

  PrivateSubnet03Block:
    Type: String
    Default: 10.123.192.0/18
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: Define the third CIDR block for private subnet
  
  AllowSSHFrom:
    Type: String
    Description: Range of addresses allowed to SSH into Bastion
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Default: 0.0.0.0/0

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: "ECS Cluster Configurations"
      Parameters:
      - ClusterName

    - Label:
        default: "VPC Configurations"
      Parameters:
      - VpcCidr
      - PublicSubnet01Block
      - PublicSubnet02Block
      - PublicSubnet03Block
      - PrivateSubnet01Block
      - PrivateSubnet02Block
      - PrivateSubnet03Block
      - AllowSSHFrom

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${ClusterName}-in-${AWS::Region}'
      - Key: auto-delete
        Value: "no"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: auto-delete
        Value: "no"
  
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: 
        Fn::GetAtt: 
        - ElasticIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet01
      Tags:
      - Key: Name
        Value: 
          Fn::Join:
          - ""
          - - !Sub '${ClusterName}-in-'
            - Fn::Select:
              - 0
              - Fn::GetAZs: !Ref AWS::Region
      - Key: auto-delete
        Value: "no"

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${ClusterName}-public-in-${AWS::Region}'
      - Key: Network
        Value: public
      - Key: auto-delete
        Value: "no"
  
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 
          Fn::Join:
          - ""
          - - !Sub '${ClusterName}-private-in-'
            - Fn::Select:
              - 0
              - Fn::GetAZs: !Ref AWS::Region
      - Key: Network
        Value: private
      - Key: auto-delete
        Value: "no"

  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  NatRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      MapPublicIpOnLaunch: true
      CidrBlock:
        Ref: PublicSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: 
          Fn::Join:
          - ""
          - - !Sub '${ClusterName}-public-in-'
            - Fn::Select:
              - 0
              - Fn::GetAZs: !Ref AWS::Region
      - Key: auto-delete
        Value: "no"

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      MapPublicIpOnLaunch: true
      CidrBlock:
        Ref: PublicSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: 
          Fn::Join:
          - ""
          - - !Sub '${ClusterName}-public-in-'
            - Fn::Select:
              - 1
              - Fn::GetAZs: !Ref AWS::Region
      - Key: auto-delete
        Value: "no"

  PublicSubnet03:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 2 
        - Fn::GetAZs:
            Ref: AWS::Region
      MapPublicIpOnLaunch: true
      CidrBlock:
        Ref: PublicSubnet03Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: 
          Fn::Join:
          - ""
          - - !Sub '${ClusterName}-public-in-'
            - Fn::Select:
              - 2
              - Fn::GetAZs: !Ref AWS::Region
      - Key: auto-delete
        Value: "no"

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: 
          Fn::Join:
          - ""
          - - !Sub '${ClusterName}-private-in-'
            - Fn::Select:
              - 0
              - Fn::GetAZs: !Ref AWS::Region
      - Key: auto-delete
        Value: "no"

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: 
          Fn::Join:
          - ""
          - - !Sub '${ClusterName}-private-in-'
            - Fn::Select:
              - 1
              - Fn::GetAZs: !Ref AWS::Region
      - Key: auto-delete
        Value: "no"

  PrivateSubnet03:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 03
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 2
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet03Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: 
          Fn::Join:
          - ""
          - - !Sub '${ClusterName}-private-in-'
            - Fn::Select:
              - 2
              - Fn::GetAZs: !Ref AWS::Region
      - Key: auto-delete
        Value: "no"

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable
    
  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet03RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet03
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet03RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet03
      RouteTableId: !Ref PrivateRouteTable
  
  ContainerInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all container instances in the cluster
      VpcId: !Ref VPC
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: '-1'
        Description: Default allow all outbound connection
      SecurityGroupIngress:
      - CidrIp: !Ref AllowSSHFrom
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
      Tags:
      - Key: Name
        Value: !Sub "${ClusterName}-container-instance-sg"
      - Key: auto-delete
        Value: "no"
  
  WorkloadSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all workload
      VpcId: !Ref VPC
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: '-1'
        Description: Default allow all outbound connection
      Tags:
      - Key: Name
        Value: !Sub "${ClusterName}-container-instance-sg"
      - Key: auto-delete
        Value: "no"
  
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all container instances in the cluster
      VpcId: !Ref VPC
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: '-1'
        Description: Default allow all outbound connection
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: 'tcp'
        Description: Allow HTTP inbound connection to ALB
        FromPort: 80
        ToPort: 80
      Tags:
      - Key: Name
        Value: "appmesh-ecs-starter-alb-instance-sg"
      - Key: auto-delete
        Value: "no"
        
  WorkloadSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow workload to communicate with each other
      GroupId: !Ref WorkloadSecurityGroup
      SourceSecurityGroupId: !Ref WorkloadSecurityGroup
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups: 
      - !Ref ALBSecurityGroup
      - !Ref WorkloadSecurityGroup
      Subnets: 
      - !Ref PublicSubnet01
      - !Ref PublicSubnet02
      - !Ref PublicSubnet03
      Tags: 
      - Key: Name
        Value: "appmesh-ecs-starter-alb"
      - Key: auto-delete
        Value: "no"
      Type: application
  
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: 
      - Order: 1
        ForwardConfig:
          TargetGroups: 
          - TargetGroupArn: !Ref ECSWorkloadTargetGroup
            Weight: 50
          - TargetGroupArn: !Ref EC2WorkloadTargetGroup
            Weight: 50
        Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  
  ECSWorkloadTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /health
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 3
      Matcher: 
        HttpCode: 200-399
      Port: 80
      Protocol: HTTP
      Tags: 
      - Key: Name
        Value: "appmesh-ecs-starter-ecs-workload-target-group"
      - Key: auto-delete
        Value: "no"
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
  
  EC2WorkloadTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /health
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 3
      Matcher: 
        HttpCode: 200-399
      Port: 80
      Protocol: HTTP
      Tags: 
      - Key: Name
        Value: "appmesh-ecs-starter-ec2-workload-target-group"
      - Key: auto-delete
        Value: "no"
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

Outputs:
  
  PrivateSubnetIds:
    Description: >-
      Collection of private subnet id where worker node will be placed
    Value:
      Fn::Join:
      - ','
      - - !Ref PrivateSubnet01
        - !Ref PrivateSubnet02
        - !Ref PrivateSubnet03

  PublicSubnetIds:
    Description: >-
      Collection of public subnet id where proxy should be depoyed
    Value:
      Fn::Join:
      - ','
      - - !Ref PublicSubnet01
        - !Ref PublicSubnet02
        - !Ref PublicSubnet03
  
  ECSContainerInstanceSecurityGroup:
    Description: >-
      Security group for worker nodes
    Value: !Ref ContainerInstanceSecurityGroup
  
  ECSWorkloadSecurityGroup:
    Description: >-
      Security group for ECS workload
    Value: !Ref WorkloadSecurityGroup
  
  ECSALBTargetGroupArn:
    Value: !Ref ECSWorkloadTargetGroup
  
  EC2ALBTargetGroupArn:
    Value: !Ref EC2WorkloadTargetGroup

  Id:
    Description: >-
      Exported VPC id for EKS Cluster
    Value: !Ref VPC